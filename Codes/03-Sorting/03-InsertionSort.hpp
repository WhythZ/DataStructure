#ifndef _INSERTION_SORT_HPP_
#define _INSERTION_SORT_HPP_

#include <vector>
#include "SortingStates.hpp"

//插入排序
//取出列表索引1处的值，其与0索引值比较，若[1]比[0]大则无需移动，若小则将[1]插入[0]左侧
//然后取出索引2处的值，其与1索引值比较，若[2]比[1]大则无需移动，若小则将其与[0]比较；若[2]比[0]大则将[2]插入[0]右侧、[1]左侧，若小则插入[0]左侧
//依此类推后续过程，直到遍历至列表中的最后一个元素并完成其判断与可能的移动，排序结束
template <typename T>
void InsertionSort(std::vector<T>& _list, SortingStates& _states)
{
    #pragma region StatesRecord
    //记录初始状态
    _states.EmplaceBack(_list);
    #pragma endregion

    //注意我们从索引1处开始，因为索引0处的左侧无元素可以比较
    for (size_t i = 1; i < _list.size(); i++)
    {
        //将i索引处的值向左浮动至符合顺序的位置进行"插入"
        size_t _idx = i;
        
        while (_list[_idx - 1] > _list[_idx])
        {
            std::swap(_list[_idx - 1], _list[_idx]);
            _idx--;

            //防止在下一个循环出现试图取得_list[-1]的数组越界问题
            if (_idx == 0)
                break;

            #pragma region StatesRecord
            //标记被插入处的索引
            std::vector<size_t> _tags = { _idx };
            _states.EmplaceBack(_list, _tags);
            #pragma endregion
        }
    }
}

// //优化掉std::swap函数后的算法，但是过程的展示不是很清晰
// template <typename T>
// void InsertionSort(std::vector<T>& _list, SortingStates& _states)
// {
//     #pragma region StatesRecord
//     //记录初始状态
//     _states.EmplaceBack(_list);
//     #pragma endregion
//
//     for (size_t i = 1; i < _list.size(); i++)
//     {
//         size_t _idx = i;
//
//         //临时存储该值
//         T _tmp = _list[i];
//         //注意这里是与上述存储的值进行比较
//         while (_list[_idx - 1] > _tmp)
//         {
//             _list[_idx] = _list[_idx - 1];
//             _idx--;
//         }
//         //将之前临时存下的值赋值到此处
//         _list[_idx] = _tmp;
//
//         #pragma region StatesRecord
//         if (_idx == i) continue;
//         std::vector<size_t> _tags = { _idx };
//         _states.EmplaceBack(_list, _tags);
//         #pragma endregion
//     }
// }

// ##LengthOfUnorderedList=15
// ##InsertionSort
// [0]:     14 , 2 , 5 , 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [1]:    <2>, 14 , 5 , 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [2]:     2 ,<5>, 14 , 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [3]:     2 , 5 ,<12>, 14 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [4]:     2 , 5 , 12 ,<3>, 14 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [5]:     2 , 5 ,<3>, 12 , 14 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [6]:     2 ,<3>, 5 , 12 , 14 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [7]:     2 , 3 , 5 , 12 ,<9>, 14 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [8]:     2 , 3 , 5 ,<9>, 12 , 14 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [9]:     2 , 3 , 5 , 9 , 12 ,<13>, 14 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [10]:    2 , 3 , 5 , 9 , 12 , 13 ,<1>, 14 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [11]:    2 , 3 , 5 , 9 , 12 ,<1>, 13 , 14 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [12]:    2 , 3 , 5 , 9 ,<1>, 12 , 13 , 14 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [13]:    2 , 3 , 5 ,<1>, 9 , 12 , 13 , 14 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [14]:    2 , 3 ,<1>, 5 , 9 , 12 , 13 , 14 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [15]:    2 ,<1>, 3 , 5 , 9 , 12 , 13 , 14 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [16]:   <1>, 2 , 3 , 5 , 9 , 12 , 13 , 14 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [17]:    1 , 2 , 3 , 5 , 9 , 12 , 13 ,<10>, 14 , 15 , 8 , 6 , 7 , 4 , 11
// [18]:    1 , 2 , 3 , 5 , 9 , 12 ,<10>, 13 , 14 , 15 , 8 , 6 , 7 , 4 , 11
// [19]:    1 , 2 , 3 , 5 , 9 ,<10>, 12 , 13 , 14 , 15 , 8 , 6 , 7 , 4 , 11
// [20]:    1 , 2 , 3 , 5 , 9 , 10 , 12 , 13 , 14 ,<8>, 15 , 6 , 7 , 4 , 11
// [21]:    1 , 2 , 3 , 5 , 9 , 10 , 12 , 13 ,<8>, 14 , 15 , 6 , 7 , 4 , 11
// [22]:    1 , 2 , 3 , 5 , 9 , 10 , 12 ,<8>, 13 , 14 , 15 , 6 , 7 , 4 , 11
// [23]:    1 , 2 , 3 , 5 , 9 , 10 ,<8>, 12 , 13 , 14 , 15 , 6 , 7 , 4 , 11
// [24]:    1 , 2 , 3 , 5 , 9 ,<8>, 10 , 12 , 13 , 14 , 15 , 6 , 7 , 4 , 11
// [25]:    1 , 2 , 3 , 5 ,<8>, 9 , 10 , 12 , 13 , 14 , 15 , 6 , 7 , 4 , 11
// [26]:    1 , 2 , 3 , 5 , 8 , 9 , 10 , 12 , 13 , 14 ,<6>, 15 , 7 , 4 , 11
// [27]:    1 , 2 , 3 , 5 , 8 , 9 , 10 , 12 , 13 ,<6>, 14 , 15 , 7 , 4 , 11
// [28]:    1 , 2 , 3 , 5 , 8 , 9 , 10 , 12 ,<6>, 13 , 14 , 15 , 7 , 4 , 11
// [29]:    1 , 2 , 3 , 5 , 8 , 9 , 10 ,<6>, 12 , 13 , 14 , 15 , 7 , 4 , 11
// [30]:    1 , 2 , 3 , 5 , 8 , 9 ,<6>, 10 , 12 , 13 , 14 , 15 , 7 , 4 , 11
// [31]:    1 , 2 , 3 , 5 , 8 ,<6>, 9 , 10 , 12 , 13 , 14 , 15 , 7 , 4 , 11
// [32]:    1 , 2 , 3 , 5 ,<6>, 8 , 9 , 10 , 12 , 13 , 14 , 15 , 7 , 4 , 11
// [33]:    1 , 2 , 3 , 5 , 6 , 8 , 9 , 10 , 12 , 13 , 14 ,<7>, 15 , 4 , 11
// [34]:    1 , 2 , 3 , 5 , 6 , 8 , 9 , 10 , 12 , 13 ,<7>, 14 , 15 , 4 , 11
// [35]:    1 , 2 , 3 , 5 , 6 , 8 , 9 , 10 , 12 ,<7>, 13 , 14 , 15 , 4 , 11
// [36]:    1 , 2 , 3 , 5 , 6 , 8 , 9 , 10 ,<7>, 12 , 13 , 14 , 15 , 4 , 11
// [37]:    1 , 2 , 3 , 5 , 6 , 8 , 9 ,<7>, 10 , 12 , 13 , 14 , 15 , 4 , 11
// [38]:    1 , 2 , 3 , 5 , 6 , 8 ,<7>, 9 , 10 , 12 , 13 , 14 , 15 , 4 , 11
// [39]:    1 , 2 , 3 , 5 , 6 ,<7>, 8 , 9 , 10 , 12 , 13 , 14 , 15 , 4 , 11
// [40]:    1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , 13 , 14 ,<4>, 15 , 11
// [41]:    1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , 13 ,<4>, 14 , 15 , 11
// [42]:    1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 , 12 ,<4>, 13 , 14 , 15 , 11
// [43]:    1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 ,<4>, 12 , 13 , 14 , 15 , 11
// [44]:    1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 ,<4>, 10 , 12 , 13 , 14 , 15 , 11
// [45]:    1 , 2 , 3 , 5 , 6 , 7 , 8 ,<4>, 9 , 10 , 12 , 13 , 14 , 15 , 11
// [46]:    1 , 2 , 3 , 5 , 6 , 7 ,<4>, 8 , 9 , 10 , 12 , 13 , 14 , 15 , 11
// [47]:    1 , 2 , 3 , 5 , 6 ,<4>, 7 , 8 , 9 , 10 , 12 , 13 , 14 , 15 , 11
// [48]:    1 , 2 , 3 , 5 ,<4>, 6 , 7 , 8 , 9 , 10 , 12 , 13 , 14 , 15 , 11
// [49]:    1 , 2 , 3 ,<4>, 5 , 6 , 7 , 8 , 9 , 10 , 12 , 13 , 14 , 15 , 11
// [50]:    1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , 13 , 14 ,<11>, 15
// [51]:    1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 12 , 13 ,<11>, 14 , 15
// [52]:    1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 12 ,<11>, 13 , 14 , 15
// [53]:    1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ,<11>, 12 , 13 , 14 , 15

#endif
#ifndef _MERGE_SORT_HPP_
#define _MERGE_SORT_HPP_

#include <vector>
#include "SortingStates.hpp"

//传入三个索引，定位需要被融合的两个已排好序的子部分，将二者融合
template <typename T>
void Merge(std::vector<T>& _list, size_t _1Begin, size_t _2Begin, size_t _2End, SortingStates& _states)
{
    //需要被合并的两个子列表必然是相邻的
    size_t _1End = _2Begin - 1;
    //分别指向两个（默认是有序的）列表中的被比较元素的索引
    size_t _1Pt = _1Begin;
    size_t _2Pt = _2Begin;

    //存放排序结果的临时列表
    std::vector<T> _result;
    
    while (true)
    {
        #pragma region StatesRecord
        //将参与合并的所有元素标记
        std::vector<size_t> _tags;
        for (size_t i = _1Begin; i <= _2End; i++) { _tags.emplace_back(i); };
        //由于合并的过程发生在原列表的外部（在_result数组内），故我们使用另一个列表来伪造合并的过程种的各状态，以便进行可视化
        //拼接伪造列表，此处将_result结果放入列表中了
        std::vector<T> _fake(_list.begin(), _list.begin() + _1Begin);
        for (size_t i = 0; i < _result.size(); i++) { _fake.emplace_back(_result[i]); };
        for (size_t i = 0; i < _2End - _1Begin + 1 - _result.size(); i++) { _fake.emplace_back(T()); };
        for (size_t i = _2End + 1; i < _list.size(); i++) { _fake.emplace_back(_list[i]); };
        //将上述为了可视化而伪造的列表状态传出
        _states.EmplaceBack(_fake, _tags);
        #pragma endregion

        //当其中一个子列表被遍历完了后，跳出循环
        if (_1Pt == _1End + 1 || _2Pt == _2End + 1)
            break;
        
        //谁小放谁到结果列表里，并递增相应的索引
        if (_list[_1Pt] <= _list[_2Pt])
        {
            _result.emplace_back(_list[_1Pt]);
            _1Pt++;
        }
        else
        {
            _result.emplace_back(_list[_2Pt]);
            _2Pt++;
        }
    }

    //将另一个未被遍历完的子列表的剩余元素塞入结果列表里
    for (; _1Pt <= _1End; _1Pt++)
    {
        _result.emplace_back(_list[_1Pt]);
    }
    for (; _2Pt <= _2End; _2Pt++)
    {
        _result.emplace_back(_list[_2Pt]);
    }

    //用融合好的结果，替换掉传入列表中未融合的那部分
    for (size_t i = _1Begin; i <= _2End;i++)
    {
        _list[i] = _result[i - _1Begin];
    }

    #pragma region StatesRecord
    //将参与合并的所有元素标记
    std::vector<size_t> _tags;
    for (size_t i = _1Begin; i <= _2End; i++) { _tags.emplace_back(i); };
    //由于这是最后一步，合并结果已经赋予到原列表中，所以无需伪造状态
    _states.EmplaceBack(_list, _tags);
    #pragma endregion
}

// //当子列表的长度小于等于该值时，调用其它的低空间复杂度的排序函数（此处使用插入排序）以降低归并排序的空间复杂度
// #define MERGE_SORT_MIX_THRESHOLD 6
// template <typename T>
// void MERGE_SORT_MIX_BORROW(std::vector<T>& _list, size_t _begin, size_t _end)
// {
//     for (size_t i = _begin + 1; i <= _end; i++)
//     {
//         //将i索引处的值向左浮动至符合顺序的位置进行"插入"
//         size_t _idx = i;
//         while (_list[_idx - 1] > _list[_idx])
//         {
//             //注意此处要限制_idx的下界，不能超出划定的范围
//             if (_idx <= _begin)
//                 break;
//             std::swap(_list[_idx - 1], _list[_idx]);
//             _idx--;
//         }
//     }
// }

//归并排序
template <typename T>
void MetaMergeSort(std::vector<T>& _list, size_t _begin, size_t _end, SortingStates& _states)
{
    //计算需要（递归的）进行归并排序的部分的长度
    size_t _length = _end - _begin + 1;
    //单个元素无需排序
    if (_length == 1)
        return;

    //计算分裂的两个子列表的定位索引
    size_t _2Begin = _begin + _length / 2;
    size_t _1End = _begin + _length / 2 - 1;

    // //若保留此判断，则就不是纯粹的归并排序了，若不包含则就是纯粹的归并排序
    // if (_length <= MERGE_SORT_MIX_THRESHOLD)
    // {
    //     //若子列表长度小于等于预定的阈值，则对该子列表调用其它低空间复杂度的排序函数
    //     MERGE_SORT_MIX_BORROW(_list, _begin, _end);
    //     return;
    // }
    
    //递归调用分裂出来的左侧的子列表
    MetaMergeSort(_list, _begin, _1End, _states);
    //递归调用分裂出来的右侧的子列表
    MetaMergeSort(_list, _2Begin, _end, _states);

    //将上述两个排好序的子列表合并
    Merge(_list, _begin, _2Begin, _end, _states);
}

//为了满足SortingManager中记录排序函数的std::function<void(std::vector<T>&, SortingStates&)>变量的类型的统一性
template <typename T>
void MergeSort(std::vector<T>& _list, SortingStates& _states)
{
    #pragma region StatesRecord
    //记录初始状态
    _states.EmplaceBack(_list);
    #pragma endregion

    //对整个列表进行归并排序
    MetaMergeSort(_list, 0, _list.size() - 1, _states);
}

// ##LengthOfUnorderedList=15
// ##MergeSort
// [0]:     14 , 2 , 5 , 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [1]:     14 ,<0>,<0>, 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [2]:     14 ,<2>,<0>, 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [3]:     14 ,<2>,<5>, 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [4]:    <0>,<0>,<0>, 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [5]:    <2>,<0>,<0>, 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [6]:    <2>,<5>,<0>, 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [7]:    <2>,<5>,<14>, 12 , 3 , 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [8]:     2 , 5 , 14 ,<0>,<0>, 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [9]:     2 , 5 , 14 ,<3>,<0>, 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [10]:    2 , 5 , 14 ,<3>,<12>, 9 , 13 , 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [11]:    2 , 5 , 14 , 3 , 12 ,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [12]:    2 , 5 , 14 , 3 , 12 ,<9>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [13]:    2 , 5 , 14 , 3 , 12 ,<9>,<13>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [14]:    2 , 5 , 14 ,<0>,<0>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [15]:    2 , 5 , 14 ,<3>,<0>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [16]:    2 , 5 , 14 ,<3>,<9>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [17]:    2 , 5 , 14 ,<3>,<9>,<12>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [18]:    2 , 5 , 14 ,<3>,<9>,<12>,<13>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [19]:   <0>,<0>,<0>,<0>,<0>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [20]:   <2>,<0>,<0>,<0>,<0>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [21]:   <2>,<3>,<0>,<0>,<0>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [22]:   <2>,<3>,<5>,<0>,<0>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [23]:   <2>,<3>,<5>,<9>,<0>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [24]:   <2>,<3>,<5>,<9>,<12>,<0>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [25]:   <2>,<3>,<5>,<9>,<12>,<13>,<0>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [26]:   <2>,<3>,<5>,<9>,<12>,<13>,<14>, 1 , 10 , 15 , 8 , 6 , 7 , 4 , 11
// [27]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<0>,<0>, 15 , 8 , 6 , 7 , 4 , 11
// [28]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<0>, 15 , 8 , 6 , 7 , 4 , 11
// [29]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<10>, 15 , 8 , 6 , 7 , 4 , 11
// [30]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 10 ,<0>,<0>, 6 , 7 , 4 , 11
// [31]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 10 ,<8>,<0>, 6 , 7 , 4 , 11
// [32]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 10 ,<8>,<15>, 6 , 7 , 4 , 11
// [33]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<0>,<0>,<0>,<0>, 6 , 7 , 4 , 11
// [34]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<0>,<0>,<0>, 6 , 7 , 4 , 11
// [35]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<8>,<0>,<0>, 6 , 7 , 4 , 11
// [36]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<8>,<10>,<0>, 6 , 7 , 4 , 11
// [37]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<8>,<10>,<15>, 6 , 7 , 4 , 11
// [38]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<0>,<0>, 4 , 11
// [39]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<6>,<0>, 4 , 11
// [40]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<6>,<7>, 4 , 11
// [41]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 , 6 , 7 ,<0>,<0>
// [42]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 , 6 , 7 ,<4>,<0>
// [43]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 , 6 , 7 ,<4>,<11>
// [44]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<0>,<0>,<0>,<0>
// [45]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<4>,<0>,<0>,<0>
// [46]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<4>,<6>,<0>,<0>
// [47]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<4>,<6>,<7>,<0>
// [48]:    2 , 3 , 5 , 9 , 12 , 13 , 14 , 1 , 8 , 10 , 15 ,<4>,<6>,<7>,<11>
// [49]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [50]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [51]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<4>,<0>,<0>,<0>,<0>,<0>,<0>
// [52]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<4>,<6>,<0>,<0>,<0>,<0>,<0>
// [53]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<4>,<6>,<7>,<0>,<0>,<0>,<0>
// [54]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<4>,<6>,<7>,<8>,<0>,<0>,<0>
// [55]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<4>,<6>,<7>,<8>,<10>,<0>,<0>
// [56]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<4>,<6>,<7>,<8>,<10>,<11>,<0>
// [57]:    2 , 3 , 5 , 9 , 12 , 13 , 14 ,<1>,<4>,<6>,<7>,<8>,<10>,<11>,<15>
// [58]:   <0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [59]:   <1>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [60]:   <1>,<2>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [61]:   <1>,<2>,<3>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [62]:   <1>,<2>,<3>,<4>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [63]:   <1>,<2>,<3>,<4>,<5>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [64]:   <1>,<2>,<3>,<4>,<5>,<6>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [65]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<0>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [66]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<0>,<0>,<0>,<0>,<0>,<0>,<0>
// [67]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<0>,<0>,<0>,<0>,<0>,<0>
// [68]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<0>,<0>,<0>,<0>,<0>
// [69]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<0>,<0>,<0>,<0>
// [70]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<0>,<0>,<0>
// [71]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<0>,<0>
// [72]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<0>
// [73]:   <1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>

#endif